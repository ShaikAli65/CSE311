{
	// Place your CSE311 PARALLEL workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:

	"Print to console": {
		// "scope": "javascript,typescript",
		"prefix": "$log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},

	"ompboilerplate": {
		"prefix": "#omp",
		"body": [
			"/*",
			"$1",
			"*/",
			"\n",
			"#include <omp.h>",
			"#include <iostream>",
			"#include <chrono>",
			"#include <vector>",
			"#include <cstdint>",
			"#include <random>",
			"#include <cstdlib>",
			"#define TIME_POINT(id) const auto id =  std::chrono::high_resolution_clock::now()",
			"#define RUN_TIME(prefix, start_id, end_id) std::cout << \"\\n\" << prefix <<\\\n (static_cast<std::chrono::duration<double>>(end_id - start_id)).count() << std::endl",
			"\n",

			"void run() {",
			"\t$0",
			"}\n",
			"int main() {",
			"    //omp_set_num_threads(4);",
			"    TIME_POINT(s);",
			"    run();",
			"    TIME_POINT(e);",
			"    RUN_TIME(\"total run time:\", s, e);",
			"    return 0;",
			"}"
		]
	}
}